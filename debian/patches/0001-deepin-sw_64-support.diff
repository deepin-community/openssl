diff --git a/Configurations/10-main.conf b/Configurations/10-main.conf
index 6fe0127..2c7d10b 100644
--- a/Configurations/10-main.conf
+++ b/Configurations/10-main.conf
@@ -989,6 +989,12 @@ my %targets = (
         asm_arch         => 'alpha',
         perlasm_scheme   => "void",
     },
+    "linux64-sw64" => {
+	inherit_from     => [ "linux-generic64" ],
+	lib_cppflags     => add("-DL_ENDIAN"),
+	# asm_arch         => 'sw_64',
+	bn_ops           => "SIXTY_FOUR_BIT_LONG",
+    },
     "linux-c64xplus" => {
         inherit_from     => [ "BASE_unix" ],
         # TI_CGT_C6000_7.3.x is a requirement
diff --git a/Configurations/20-debian.conf b/Configurations/20-debian.conf
index 177c184..82e5ed0 100644
--- a/Configurations/20-debian.conf
+++ b/Configurations/20-debian.conf
@@ -151,6 +151,11 @@ my %targets = (
 	"debian-sparc64" => {
 	        inherit_from => [ "linux64-sparcv9", "debian" ],
 	},
+	"debian-sw64" => {
+		inherit_from => [ "linux64-sw64", "debian" ],
+		#asm_arch => "sw_64",
+		cflags => add("-DL_ENDIAN"),
+	},
 	"debian-tilegx" => {
 		inherit_from => [ "linux-generic64", "debian" ],
 	},
diff --git a/crypto/bn/asm/sw_64-mont.pl b/crypto/bn/asm/sw_64-mont.pl
new file mode 100644
index 0000000..dce5a1b
--- /dev/null
+++ b/crypto/bn/asm/sw_64-mont.pl
@@ -0,0 +1,325 @@
+#! /usr/bin/env perl
+# Copyright 2006-2016 The OpenSSL Project Authors. All Rights Reserved.
+#
+# Licensed under the OpenSSL license (the "License").  You may not use
+# this file except in compliance with the License.  You can obtain a copy
+# in the file LICENSE in the source distribution or at
+# https://www.openssl.org/source/license.html
+
+#
+# ====================================================================
+# Written by Andy Polyakov <appro@fy.chalmers.se> for the OpenSSL
+# project. The module is, however, dual licensed under OpenSSL and
+# CRYPTOGAMS licenses depending on where you obtain it. For further
+# details see http://www.openssl.org/~appro/cryptogams/.
+# ====================================================================
+#
+# On 21264 RSA sign performance improves by 70/35/20/15 percent for
+# 512/1024/2048/4096 bit key lengths. This is against vendor compiler
+# instructed to '-tune host' code with in-line assembler. Other
+# benchmarks improve by 15-20%. To anchor it to something else, the
+# code provides approximately the same performance per GHz as AMD64.
+# I.e. if you compare 1GHz 21264 and 2GHz Opteron, you'll observe ~2x
+# difference.
+
+$output=pop;
+open STDOUT,">$output";
+
+# int bn_mul_mont(
+$rp="a0";	# BN_ULONG *rp,
+$ap="a1";	# const BN_ULONG *ap,
+$bp="a2";	# const BN_ULONG *bp,
+$np="a3";	# const BN_ULONG *np,
+$n0="a4";	# const BN_ULONG *n0,
+$num="a5";	# int num);
+
+$lo0="t0";
+$hi0="t1";
+$lo1="t2";
+$hi1="t3";
+$aj="t4";
+$bi="t5";
+$nj="t6";
+$tp="t7";
+$alo="t8";
+$ahi="t9";
+$nlo="t10";
+$nhi="t11";
+$tj="t12";
+$i="s3";
+$j="s4";
+$m1="s5";
+
+$code=<<___;
+#include <asm/regdef.h>
+
+.text
+
+.set	noat
+.set	noreorder
+
+.globl	bn_mul_mont
+.align	5
+.ent	bn_mul_mont
+bn_mul_mont:
+	ldi	sp,-48(sp)
+	stl	ra,0(sp)
+	stl	s3,8(sp)
+	stl	s4,16(sp)
+	stl	s5,24(sp)
+	stl	fp,32(sp)
+	mov	sp,fp
+	.mask	0x0400f000,-48
+	.frame	fp,48,ra
+	.prologue 0
+
+	.align	4
+	.set	reorder
+	sextl	$num,$num
+	mov	0,v0
+	cmplt	$num,4,AT
+	bne	AT,.Lexit
+
+	ldl	$hi0,0($ap)	# ap[0]
+	s8addl	$num,16,AT
+	ldl	$aj,8($ap)
+	subl	sp,AT,sp
+	ldl	$bi,0($bp)	# bp[0]
+	ldi	AT,-4096(zero)	# mov	-4096,AT
+	ldl	$n0,0($n0)
+	and	sp,AT,sp
+
+	mull	$hi0,$bi,$lo0
+	ldl	$hi1,0($np)	# np[0]
+	umulh	$hi0,$bi,$hi0
+	ldl	$nj,8($np)
+
+	mull	$lo0,$n0,$m1
+
+	mull	$hi1,$m1,$lo1
+	umulh	$hi1,$m1,$hi1
+
+	addl	$lo1,$lo0,$lo1
+	cmpult	$lo1,$lo0,AT
+	addl	$hi1,AT,$hi1
+
+	mull	$aj,$bi,$alo
+	mov	2,$j
+	umulh	$aj,$bi,$ahi
+	mov	sp,$tp
+
+	mull	$nj,$m1,$nlo
+	s8addl	$j,$ap,$aj
+	umulh	$nj,$m1,$nhi
+	s8addl	$j,$np,$nj
+.align	4
+.L1st:
+	.set	noreorder
+	ldl	$aj,0($aj)
+	addl	$j,1,$j
+	ldl	$nj,0($nj)
+	ldi	$tp,8($tp)
+
+	addl	$alo,$hi0,$lo0
+	mull	$aj,$bi,$alo
+	cmpult	$lo0,$hi0,AT
+	addl	$nlo,$hi1,$lo1
+
+	mull	$nj,$m1,$nlo
+	addl	$ahi,AT,$hi0
+	cmpult	$lo1,$hi1,v0
+	cmplt	$j,$num,$tj
+
+	umulh	$aj,$bi,$ahi
+	addl	$nhi,v0,$hi1
+	addl	$lo1,$lo0,$lo1
+	s8addl	$j,$ap,$aj
+
+	umulh	$nj,$m1,$nhi
+	cmpult	$lo1,$lo0,v0
+	addl	$hi1,v0,$hi1
+	s8addl	$j,$np,$nj
+
+	stl	$lo1,-8($tp)
+	nop
+	unop
+	bne	$tj,.L1st
+	.set	reorder
+
+	addl	$alo,$hi0,$lo0
+	addl	$nlo,$hi1,$lo1
+	cmpult	$lo0,$hi0,AT
+	cmpult	$lo1,$hi1,v0
+	addl	$ahi,AT,$hi0
+	addl	$nhi,v0,$hi1
+
+	addl	$lo1,$lo0,$lo1
+	cmpult	$lo1,$lo0,v0
+	addl	$hi1,v0,$hi1
+
+	stl	$lo1,0($tp)
+
+	addl	$hi1,$hi0,$hi1
+	cmpult	$hi1,$hi0,AT
+	stl	$hi1,8($tp)
+	stl	AT,16($tp)
+
+	mov	1,$i
+.align	4
+.Louter:
+	s8addl	$i,$bp,$bi
+	ldl	$hi0,0($ap)
+	ldl	$aj,8($ap)
+	ldl	$bi,0($bi)
+	ldl	$hi1,0($np)
+	ldl	$nj,8($np)
+	ldl	$tj,0(sp)
+
+	mull	$hi0,$bi,$lo0
+	umulh	$hi0,$bi,$hi0
+
+	addl	$lo0,$tj,$lo0
+	cmpult	$lo0,$tj,AT
+	addl	$hi0,AT,$hi0
+
+	mull	$lo0,$n0,$m1
+
+	mull	$hi1,$m1,$lo1
+	umulh	$hi1,$m1,$hi1
+
+	addl	$lo1,$lo0,$lo1
+	cmpult	$lo1,$lo0,AT
+	mov	2,$j
+	addl	$hi1,AT,$hi1
+
+	mull	$aj,$bi,$alo
+	mov	sp,$tp
+	umulh	$aj,$bi,$ahi
+
+	mull	$nj,$m1,$nlo
+	s8addl	$j,$ap,$aj
+	umulh	$nj,$m1,$nhi
+.align	4
+.Linner:
+	.set	noreorder
+	ldl	$tj,8($tp)	#L0
+	nop			#U1
+	ldl	$aj,0($aj)	#L1
+	s8addl	$j,$np,$nj	#U0
+
+	ldl	$nj,0($nj)	#L0
+	nop			#U1
+	addl	$alo,$hi0,$lo0	#L1
+	ldi	$tp,8($tp)
+
+	mull	$aj,$bi,$alo	#U1
+	cmpult	$lo0,$hi0,AT	#L0
+	addl	$nlo,$hi1,$lo1	#L1
+	addl	$j,1,$j
+
+	mull	$nj,$m1,$nlo	#U1
+	addl	$ahi,AT,$hi0	#L0
+	addl	$lo0,$tj,$lo0	#L1
+	cmpult	$lo1,$hi1,v0	#U0
+
+	umulh	$aj,$bi,$ahi	#U1
+	cmpult	$lo0,$tj,AT	#L0
+	addl	$lo1,$lo0,$lo1	#L1
+	addl	$nhi,v0,$hi1	#U0
+
+	umulh	$nj,$m1,$nhi	#U1
+	s8addl	$j,$ap,$aj	#L0
+	cmpult	$lo1,$lo0,v0	#L1
+	cmplt	$j,$num,$tj	#U0	# borrow $tj
+
+	addl	$hi0,AT,$hi0	#L0
+	addl	$hi1,v0,$hi1	#U1
+	stl	$lo1,-8($tp)	#L1
+	bne	$tj,.Linner	#U0
+	.set	reorder
+
+	ldl	$tj,8($tp)
+	addl	$alo,$hi0,$lo0
+	addl	$nlo,$hi1,$lo1
+	cmpult	$lo0,$hi0,AT
+	cmpult	$lo1,$hi1,v0
+	addl	$ahi,AT,$hi0
+	addl	$nhi,v0,$hi1
+
+	addl	$lo0,$tj,$lo0
+	cmpult	$lo0,$tj,AT
+	addl	$hi0,AT,$hi0
+
+	ldl	$tj,16($tp)
+	addl	$lo1,$lo0,$j
+	cmpult	$j,$lo0,v0
+	addl	$hi1,v0,$hi1
+
+	addl	$hi1,$hi0,$lo1
+	stl	$j,0($tp)
+	cmpult	$lo1,$hi0,$hi1
+	addl	$lo1,$tj,$lo1
+	cmpult	$lo1,$tj,AT
+	addl	$i,1,$i
+	addl	$hi1,AT,$hi1
+	stl	$lo1,8($tp)
+	cmplt	$i,$num,$tj	# borrow $tj
+	stl	$hi1,16($tp)
+	bne	$tj,.Louter
+
+	s8addl	$num,sp,$tj	# &tp[num]
+	mov	$rp,$bp		# put rp aside
+	mov	sp,$tp
+	mov	sp,$ap
+	mov	0,$hi0		# clear borrow bit
+
+.align	4
+.Lsub:	ldl	$lo0,0($tp)
+	ldl	$lo1,0($np)
+	ldi	$tp,8($tp)
+	ldi	$np,8($np)
+	subl	$lo0,$lo1,$lo1	# tp[i]-np[i]
+	cmpult	$lo0,$lo1,AT
+	subl	$lo1,$hi0,$lo0
+	cmpult	$lo1,$lo0,$hi0
+	or	$hi0,AT,$hi0
+	stl	$lo0,0($rp)
+	cmpult	$tp,$tj,v0
+	ldi	$rp,8($rp)
+	bne	v0,.Lsub
+
+	subl	$hi1,$hi0,$hi0	# handle upmost overflow bit
+	mov	sp,$tp
+	mov	$bp,$rp		# restore rp
+
+	and	sp,$hi0,$ap
+	bic	$bp,$hi0,$bp
+	bis	$bp,$ap,$ap	# ap=borrow?tp:rp
+
+.align	4
+.Lcopy:	ldl	$aj,0($ap)	# copy or in-place refresh
+	ldi	$tp,8($tp)
+	ldi	$rp,8($rp)
+	ldi	$ap,8($ap)
+	stl	zero,-8($tp)	# zap tp
+	cmpult	$tp,$tj,AT
+	stl	$aj,-8($rp)
+	bne	AT,.Lcopy
+	mov	1,v0
+
+.Lexit:
+	.set	noreorder
+	mov	fp,sp
+	/*ldl	ra,0(sp)*/
+	ldl	s3,8(sp)
+	ldl	s4,16(sp)
+	ldl	s5,24(sp)
+	ldl	fp,32(sp)
+	ldi	sp,48(sp)
+	ret	(ra)
+.end	bn_mul_mont
+.align	2
+___
+
+print $code;
+close STDOUT;
diff --git a/crypto/bn/build.info b/crypto/bn/build.info
index 2f30681..4c48747 100644
--- a/crypto/bn/build.info
+++ b/crypto/bn/build.info
@@ -50,6 +50,9 @@ IF[{- !$disabled{asm} -}]
   $BNASM_alpha=bn_asm.c alpha-mont.S
   $BNDEF_alpha=OPENSSL_BN_ASM_MONT
 
+  $BNASM_sw_64=bn_asm.c sw_64-mont.S
+  $BNDEF_sw_64=OPENSSL_BN_ASM_MONT
+
   $BNASM_mips32=bn-mips.S mips-mont.S
   $BNDEF_mips32=OPENSSL_BN_ASM_MONT
   $BNASM_mips64=$BNASM_mips32
@@ -171,6 +174,7 @@ GENERATE[ppc64-mont.s]=asm/ppc64-mont.pl
 GENERATE[ppc64-mont-fixed.s]=asm/ppc64-mont-fixed.pl
 
 GENERATE[alpha-mont.S]=asm/alpha-mont.pl
+GENERATE[sw_64-mont.S]=asm/sw_64-mont.pl
 
 GENERATE[armv4-mont.S]=asm/armv4-mont.pl
 INCLUDE[armv4-mont.o]=..
diff --git a/crypto/build.info b/crypto/build.info
index 2d5b22f..cccbd7a 100644
--- a/crypto/build.info
+++ b/crypto/build.info
@@ -37,6 +37,8 @@ IF[{- !$disabled{asm} && $config{processor} ne '386' -}]
 
   $CPUIDASM_alpha=alphacpuid.s
 
+  $CPUIDASM_sw_64=sw_64cpuid.s
+
   $CPUIDASM_s390x=s390xcap.c s390xcpuid.S
 
   $CPUIDASM_armv4=armcap.c armv4cpuid.S
@@ -130,6 +132,7 @@ GENERATE[ia64cpuid.s]=ia64cpuid.S
 GENERATE[ppccpuid.s]=ppccpuid.pl
 GENERATE[pariscid.s]=pariscid.pl
 GENERATE[alphacpuid.s]=alphacpuid.pl
+GENERATE[sw_64cpuid.s]=sw_64cpuid.pl
 GENERATE[arm64cpuid.S]=arm64cpuid.pl
 INCLUDE[arm64cpuid.o]=.
 GENERATE[armv4cpuid.S]=armv4cpuid.pl
diff --git a/crypto/modes/asm/ghash-sw_64.pl b/crypto/modes/asm/ghash-sw_64.pl
new file mode 100644
index 0000000..a8c267f
--- /dev/null
+++ b/crypto/modes/asm/ghash-sw_64.pl
@@ -0,0 +1,461 @@
+#! /usr/bin/env perl
+# Copyright 2010-2016 The OpenSSL Project Authors. All Rights Reserved.
+#
+# Licensed under the OpenSSL license (the "License").  You may not use
+# this file except in compliance with the License.  You can obtain a copy
+# in the file LICENSE in the source distribution or at
+# https://www.openssl.org/source/license.html
+
+#
+# ====================================================================
+# Written by Andy Polyakov <appro@openssl.org> for the OpenSSL
+# project. The module is, however, dual licensed under OpenSSL and
+# CRYPTOGAMS licenses depending on where you obtain it. For further
+# details see http://www.openssl.org/~appro/cryptogams/.
+# ====================================================================
+#
+# March 2010
+#
+# The module implements "4-bit" GCM GHASH function and underlying
+# single multiplication operation in GF(2^128). "4-bit" means that it
+# uses 256 bytes per-key table [+128 bytes shared table]. Even though
+# loops are aggressively modulo-scheduled in respect to references to
+# Htbl and Z.hi updates for 8 cycles per byte, measured performance is
+# ~12 cycles per processed byte on 21264 CPU. It seems to be a dynamic
+# scheduling "glitch," because uprofile(1) indicates uniform sample
+# distribution, as if all instruction bundles execute in 1.5 cycles.
+# Meaning that it could have been even faster, yet 12 cycles is ~60%
+# better than gcc-generated code and ~80% than code generated by vendor
+# compiler.
+
+$cnt="v0";	# $0
+$t0="t0";
+$t1="t1";
+$t2="t2";
+$Thi0="t3";	# $4
+$Tlo0="t4";
+$Thi1="t5";
+$Tlo1="t6";
+$rem="t7";	# $8
+#################
+$Xi="a0";	# $16, input argument block
+$Htbl="a1";
+$inp="a2";
+$len="a3";
+$nlo="a4";	# $20
+$nhi="a5";
+$Zhi="t8";
+$Zlo="t9";
+$Xhi="t10";	# $24
+$Xlo="t11";
+$remp="t12";
+$rem_4bit="AT";	# $28
+
+{ my $N;
+  sub loop() {
+
+	$N++;
+$code.=<<___;
+.align	4
+	ext0b	$Xlo,7,$nlo
+	and	$nlo,0xf0,$nhi
+	sll	$nlo,4,$nlo
+	and	$nlo,0xf0,$nlo
+
+	addl	$nlo,$Htbl,$nlo
+	ldl	$Zlo,8($nlo)
+	addl	$nhi,$Htbl,$nhi
+	ldl	$Zhi,0($nlo)
+
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	ldi	$cnt,6(zero)
+	ext0b	$Xlo,6,$nlo
+
+	ldl	$Tlo1,8($nhi)
+	s8addl	$remp,$rem_4bit,$remp
+	ldl	$Thi1,0($nhi)
+	srl	$Zlo,4,$Zlo
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	xor	$t0,$Zlo,$Zlo
+	and	$nlo,0xf0,$nhi
+
+	xor	$Tlo1,$Zlo,$Zlo
+	sll	$nlo,4,$nlo
+	xor	$Thi1,$Zhi,$Zhi
+	and	$nlo,0xf0,$nlo
+
+	addl	$nlo,$Htbl,$nlo
+	ldl	$Tlo0,8($nlo)
+	addl	$nhi,$Htbl,$nhi
+	ldl	$Thi0,0($nlo)
+
+.Looplo$N:
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	subl	$cnt,1,$cnt
+	srl	$Zlo,4,$Zlo
+
+	ldl	$Tlo1,8($nhi)
+	xor	$rem,$Zhi,$Zhi
+	ldl	$Thi1,0($nhi)
+	s8addl	$remp,$rem_4bit,$remp
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	xor	$t0,$Zlo,$Zlo
+	ext0b	$Xlo,$cnt,$nlo
+
+	and	$nlo,0xf0,$nhi
+	xor	$Thi0,$Zhi,$Zhi
+	xor	$Tlo0,$Zlo,$Zlo
+	sll	$nlo,4,$nlo
+
+
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	and	$nlo,0xf0,$nlo
+	srl	$Zlo,4,$Zlo
+
+	s8addl	$remp,$rem_4bit,$remp
+	xor	$rem,$Zhi,$Zhi
+	addl	$nlo,$Htbl,$nlo
+	addl	$nhi,$Htbl,$nhi
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	ldl	$Tlo0,8($nlo)
+	xor	$t0,$Zlo,$Zlo
+
+	xor	$Tlo1,$Zlo,$Zlo
+	xor	$Thi1,$Zhi,$Zhi
+	ldl	$Thi0,0($nlo)
+	bne	$cnt,.Looplo$N
+
+
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	ldi	$cnt,7(zero)
+	srl	$Zlo,4,$Zlo
+
+	ldl	$Tlo1,8($nhi)
+	xor	$rem,$Zhi,$Zhi
+	ldl	$Thi1,0($nhi)
+	s8addl	$remp,$rem_4bit,$remp
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	xor	$t0,$Zlo,$Zlo
+	ext0b	$Xhi,$cnt,$nlo
+
+	and	$nlo,0xf0,$nhi
+	xor	$Thi0,$Zhi,$Zhi
+	xor	$Tlo0,$Zlo,$Zlo
+	sll	$nlo,4,$nlo
+
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	and	$nlo,0xf0,$nlo
+	srl	$Zlo,4,$Zlo
+
+	s8addl	$remp,$rem_4bit,$remp
+	xor	$rem,$Zhi,$Zhi
+	addl	$nlo,$Htbl,$nlo
+	addl	$nhi,$Htbl,$nhi
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	ldl	$Tlo0,8($nlo)
+	xor	$t0,$Zlo,$Zlo
+
+	xor	$Tlo1,$Zlo,$Zlo
+	xor	$Thi1,$Zhi,$Zhi
+	ldl	$Thi0,0($nlo)
+	unop
+
+
+.Loophi$N:
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	subl	$cnt,1,$cnt
+	srl	$Zlo,4,$Zlo
+
+	ldl	$Tlo1,8($nhi)
+	xor	$rem,$Zhi,$Zhi
+	ldl	$Thi1,0($nhi)
+	s8addl	$remp,$rem_4bit,$remp
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	xor	$t0,$Zlo,$Zlo
+	ext0b	$Xhi,$cnt,$nlo
+
+	and	$nlo,0xf0,$nhi
+	xor	$Thi0,$Zhi,$Zhi
+	xor	$Tlo0,$Zlo,$Zlo
+	sll	$nlo,4,$nlo
+
+
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	and	$nlo,0xf0,$nlo
+	srl	$Zlo,4,$Zlo
+
+	s8addl	$remp,$rem_4bit,$remp
+	xor	$rem,$Zhi,$Zhi
+	addl	$nlo,$Htbl,$nlo
+	addl	$nhi,$Htbl,$nhi
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	ldl	$Tlo0,8($nlo)
+	xor	$t0,$Zlo,$Zlo
+
+	xor	$Tlo1,$Zlo,$Zlo
+	xor	$Thi1,$Zhi,$Zhi
+	ldl	$Thi0,0($nlo)
+	bne	$cnt,.Loophi$N
+
+
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	srl	$Zlo,4,$Zlo
+
+	ldl	$Tlo1,8($nhi)
+	xor	$rem,$Zhi,$Zhi
+	ldl	$Thi1,0($nhi)
+	s8addl	$remp,$rem_4bit,$remp
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	xor	$t0,$Zlo,$Zlo
+
+	xor	$Tlo0,$Zlo,$Zlo
+	xor	$Thi0,$Zhi,$Zhi
+
+	and	$Zlo,0x0f,$remp
+	sll	$Zhi,60,$t0
+	srl	$Zlo,4,$Zlo
+
+	s8addl	$remp,$rem_4bit,$remp
+	xor	$rem,$Zhi,$Zhi
+
+	ldl	$rem,0($remp)
+	srl	$Zhi,4,$Zhi
+	xor	$Tlo1,$Zlo,$Zlo
+	xor	$Thi1,$Zhi,$Zhi
+	xor	$t0,$Zlo,$Zlo
+	xor	$rem,$Zhi,$Zhi
+___
+}}
+
+$code=<<___;
+#include <asm/regdef.h>
+
+.text
+
+.set	noat
+.set	noreorder
+.globl	gcm_gmult_4bit
+.align	4
+.ent	gcm_gmult_4bit
+gcm_gmult_4bit:
+	.frame	sp,0,ra
+	.prologue 0
+
+	ldl	$Xlo,8($Xi)
+	ldl	$Xhi,0($Xi)
+
+	bsr	$t0,picmeup
+	nop
+___
+
+	&loop();
+
+$code.=<<___;
+	srl	$Zlo,24,$t0	# byte swap
+	srl	$Zlo,8,$t1
+
+	sll	$Zlo,8,$t2
+	sll	$Zlo,24,$Zlo
+	zapnot	$t0,0x11,$t0
+	zapnot	$t1,0x22,$t1
+
+	zapnot	$Zlo,0x88,$Zlo
+	or	$t0,$t1,$t0
+	zapnot	$t2,0x44,$t2
+
+	or	$Zlo,$t0,$Zlo
+	srl	$Zhi,24,$t0
+	srl	$Zhi,8,$t1
+
+	or	$Zlo,$t2,$Zlo
+	sll	$Zhi,8,$t2
+	sll	$Zhi,24,$Zhi
+
+	srl	$Zlo,32,$Xlo
+	sll	$Zlo,32,$Zlo
+
+	zapnot	$t0,0x11,$t0
+	zapnot	$t1,0x22,$t1
+	or	$Zlo,$Xlo,$Xlo
+
+	zapnot	$Zhi,0x88,$Zhi
+	or	$t0,$t1,$t0
+	zapnot	$t2,0x44,$t2
+
+	or	$Zhi,$t0,$Zhi
+	or	$Zhi,$t2,$Zhi
+
+	srl	$Zhi,32,$Xhi
+	sll	$Zhi,32,$Zhi
+
+	or	$Zhi,$Xhi,$Xhi
+	stl	$Xlo,8($Xi)
+	stl	$Xhi,0($Xi)
+
+	ret	(ra)
+.end	gcm_gmult_4bit
+___
+
+$inhi="s0";
+$inlo="s1";
+
+$code.=<<___;
+.globl	gcm_ghash_4bit
+.align	4
+.ent	gcm_ghash_4bit
+gcm_ghash_4bit:
+	ldi	sp,-32(sp)
+	stl	ra,0(sp)
+	stl	s0,8(sp)
+	stl	s1,16(sp)
+	.mask	0x04000600,-32
+	.frame	sp,32,ra
+	.prologue 0
+
+	ldl_u	$inhi,0($inp)
+	ldl_u	$Thi0,7($inp)
+	ldl_u	$inlo,8($inp)
+	ldl_u	$Tlo0,15($inp)
+	ldl	$Xhi,0($Xi)
+	ldl	$Xlo,8($Xi)
+
+	bsr	$t0,picmeup
+	nop
+
+.Louter:
+	ext3b	$inhi,$inp,$inhi
+	ext7b	$Thi0,$inp,$Thi0
+	or	$inhi,$Thi0,$inhi
+	ldi	$inp,16($inp)
+
+	ext3b	$inlo,$inp,$inlo
+	ext7b	$Tlo0,$inp,$Tlo0
+	or	$inlo,$Tlo0,$inlo
+	subl	$len,16,$len
+
+	xor	$Xlo,$inlo,$Xlo
+	xor	$Xhi,$inhi,$Xhi
+___
+
+	&loop();
+
+$code.=<<___;
+	srl	$Zlo,24,$t0	# byte swap
+	srl	$Zlo,8,$t1
+
+	sll	$Zlo,8,$t2
+	sll	$Zlo,24,$Zlo
+	zapnot	$t0,0x11,$t0
+	zapnot	$t1,0x22,$t1
+
+	zapnot	$Zlo,0x88,$Zlo
+	or	$t0,$t1,$t0
+	zapnot	$t2,0x44,$t2
+
+	or	$Zlo,$t0,$Zlo
+	srl	$Zhi,24,$t0
+	srl	$Zhi,8,$t1
+
+	or	$Zlo,$t2,$Zlo
+	sll	$Zhi,8,$t2
+	sll	$Zhi,24,$Zhi
+
+	srl	$Zlo,32,$Xlo
+	sll	$Zlo,32,$Zlo
+	beq	$len,.Ldone
+
+	zapnot	$t0,0x11,$t0
+	zapnot	$t1,0x22,$t1
+	or	$Zlo,$Xlo,$Xlo
+	ldl_u	$inhi,0($inp)
+
+	zapnot	$Zhi,0x88,$Zhi
+	or	$t0,$t1,$t0
+	zapnot	$t2,0x44,$t2
+	ldl_u	$Thi0,7($inp)
+
+	or	$Zhi,$t0,$Zhi
+	or	$Zhi,$t2,$Zhi
+	ldl_u	$inlo,8($inp)
+	ldl_u	$Tlo0,15($inp)
+
+	srl	$Zhi,32,$Xhi
+	sll	$Zhi,32,$Zhi
+
+	or	$Zhi,$Xhi,$Xhi
+	br	zero,.Louter
+
+.Ldone:
+	zapnot	$t0,0x11,$t0
+	zapnot	$t1,0x22,$t1
+	or	$Zlo,$Xlo,$Xlo
+
+	zapnot	$Zhi,0x88,$Zhi
+	or	$t0,$t1,$t0
+	zapnot	$t2,0x44,$t2
+
+	or	$Zhi,$t0,$Zhi
+	or	$Zhi,$t2,$Zhi
+
+	srl	$Zhi,32,$Xhi
+	sll	$Zhi,32,$Zhi
+
+	or	$Zhi,$Xhi,$Xhi
+
+	stl	$Xlo,8($Xi)
+	stl	$Xhi,0($Xi)
+
+	.set	noreorder
+	/*ldl	ra,0(sp)*/
+	ldl	s0,8(sp)
+	ldl	s1,16(sp)
+	ldi	sp,32(sp)
+	ret	(ra)
+.end	gcm_ghash_4bit
+
+.align	4
+.ent	picmeup
+picmeup:
+	.frame	sp,0,$t0
+	.prologue 0
+	br	$rem_4bit,.Lpic
+.Lpic:	ldi	$rem_4bit,12($rem_4bit)
+	ret	($t0)
+.end	picmeup
+	nop
+rem_4bit:
+	.long	0,0x0000<<16, 0,0x1C20<<16, 0,0x3840<<16, 0,0x2460<<16
+	.long	0,0x7080<<16, 0,0x6CA0<<16, 0,0x48C0<<16, 0,0x54E0<<16
+	.long	0,0xE100<<16, 0,0xFD20<<16, 0,0xD940<<16, 0,0xC560<<16
+	.long	0,0x9180<<16, 0,0x8DA0<<16, 0,0xA9C0<<16, 0,0xB5E0<<16
+.align	4
+
+___
+$output=pop and open STDOUT,">$output";
+print $code;
+close STDOUT;
+
diff --git a/crypto/modes/build.info b/crypto/modes/build.info
index c79f75c..bd8e893 100644
--- a/crypto/modes/build.info
+++ b/crypto/modes/build.info
@@ -19,6 +19,9 @@ IF[{- !$disabled{asm} -}]
   $MODESASM_alpha=ghash-alpha.S
   $MODESDEF_alpha=GHASH_ASM
 
+  $MODESASM_sw_64=ghash-sw_64.S
+  $MODESDEF_sw_64=GHASH_ASM
+
   $MODESASM_s390x=ghash-s390x.S
   $MODESDEF_s390x=GHASH_ASM
 
@@ -76,6 +79,7 @@ GENERATE[aes-gcm-avx512.s]=asm/aes-gcm-avx512.pl
 GENERATE[ghash-sparcv9.S]=asm/ghash-sparcv9.pl
 INCLUDE[ghash-sparcv9.o]=..
 GENERATE[ghash-alpha.S]=asm/ghash-alpha.pl
+GENERATE[ghash-sw_64.S]=asm/ghash-sw_64.pl
 GENERATE[ghash-parisc.s]=asm/ghash-parisc.pl
 GENERATE[ghashp8-ppc.s]=asm/ghashp8-ppc.pl
 GENERATE[aes-gcm-ppc.s]=asm/aes-gcm-ppc.pl
diff --git a/crypto/sw_64cpuid.pl b/crypto/sw_64cpuid.pl
new file mode 100644
index 0000000..a66b13c
--- /dev/null
+++ b/crypto/sw_64cpuid.pl
@@ -0,0 +1,272 @@
+#! /usr/bin/env perl
+# Copyright 2010-2016 The OpenSSL Project Authors. All Rights Reserved.
+#
+# Licensed under the OpenSSL license (the "License").  You may not use
+# this file except in compliance with the License.  You can obtain a copy
+# in the file LICENSE in the source distribution or at
+# https://www.openssl.org/source/license.html
+
+
+$output = pop;
+open STDOUT,">$output";
+
+print <<'___';
+.text
+
+.set	noat
+
+.globl	OPENSSL_cpuid_setup
+.ent	OPENSSL_cpuid_setup
+OPENSSL_cpuid_setup:
+	.frame	$30,0,$26
+	.prologue 0
+	ret	($26)
+.end	OPENSSL_cpuid_setup
+
+.globl	OPENSSL_wipe_cpu
+.ent	OPENSSL_wipe_cpu
+OPENSSL_wipe_cpu:
+	.frame	$30,0,$26
+	.prologue 0
+	clr	$1
+	clr	$2
+	clr	$3
+	clr	$4
+	clr	$5
+	clr	$6
+	clr	$7
+	clr	$8
+	clr	$16
+	clr	$17
+	clr	$18
+	clr	$19
+	clr	$20
+	clr	$21
+	clr	$22
+	clr	$23
+	clr	$24
+	clr	$25
+	clr	$27
+	clr	$at
+	clr	$29
+	fclr	$f0
+	fclr	$f1
+	fclr	$f10
+	fclr	$f11
+	fclr	$f12
+	fclr	$f13
+	fclr	$f14
+	fclr	$f15
+	fclr	$f16
+	fclr	$f17
+	fclr	$f18
+	fclr	$f19
+	fclr	$f20
+	fclr	$f21
+	fclr	$f22
+	fclr	$f23
+	fclr	$f24
+	fclr	$f25
+	fclr	$f26
+	fclr	$f27
+	fclr	$f28
+	fclr	$f29
+	fclr	$f30
+	mov	$sp,$0
+	ret	($26)
+.end	OPENSSL_wipe_cpu
+
+.globl	OPENSSL_atomic_add
+.ent	OPENSSL_atomic_add
+OPENSSL_atomic_add:
+	.frame	$30,0,$26
+	.prologue 0
+1:	lldw	$0,0($16)
+	ldi     $1,1
+	wr_f    $1
+	addl	$0,$17,$1
+	lldw	$1,0($16)
+	rd_f    $1
+	beq	$1,1b
+	addl	$0,$17,$0
+	ret	($26)
+.end	OPENSSL_atomic_add
+
+.globl	OPENSSL_rdtsc
+.ent	OPENSSL_rdtsc
+OPENSSL_rdtsc:
+	.frame	$30,0,$26
+	.prologue 0
+	rtc	$0
+	ret	($26)
+.end	OPENSSL_rdtsc
+
+.globl	OPENSSL_cleanse
+.ent	OPENSSL_cleanse
+OPENSSL_cleanse:
+	.frame	$30,0,$26
+	.prologue 0
+	beq	$17,.Ldone
+	and	$16,7,$0
+	bic	$17,7,$at
+	beq	$at,.Little
+	beq	$0,.Laligned
+
+.Little:
+	subl	$0,8,$0
+	ldl_u	$1,0($16)
+	mov	$16,$2
+.Lalign:
+	mask0b	$1,$16,$1
+	ldi	$16,1($16)
+	subl	$17,1,$17
+	addl	$0,1,$0
+	beq	$17,.Lout
+	bne	$0,.Lalign
+.Lout:	stl_u	$1,0($2)
+	beq	$17,.Ldone
+	bic	$17,7,$at
+	beq	$at,.Little
+
+.Laligned:
+	stl	$31,0($16)
+	subl	$17,8,$17
+	ldi	$16,8($16)
+	bic	$17,7,$at
+	bne	$at,.Laligned
+	bne	$17,.Little
+.Ldone: ret	($26)
+.end	OPENSSL_cleanse
+
+.globl	CRYPTO_memcmp
+.ent	CRYPTO_memcmp
+CRYPTO_memcmp:
+	.frame	$30,0,$26
+	.prologue 0
+	xor	$0,$0,$0
+	beq	$18,.Lno_data
+
+	xor	$1,$1,$1
+	nop
+.Loop_cmp:
+	ldl_u	$2,0($16)
+	subl	$18,1,$18
+	ldl_u	$3,0($17)
+	ext0b	$2,$16,$2
+	ldi	$16,1($16)
+	ext0b	$3,$17,$3
+	ldi	$17,1($17)
+	xor	$3,$2,$2
+	or	$2,$0,$0
+	bne	$18,.Loop_cmp
+
+	subl	$31,$0,$0
+	srl	$0,63,$0
+.Lno_data:
+	ret	($26)
+.end	CRYPTO_memcmp
+___
+{
+my ($out,$cnt,$max)=("\$16","\$17","\$18");
+my ($tick,$lasttick)=("\$19","\$20");
+my ($diff,$lastdiff,$tmp)=("\$21","\$22","\$23");
+my ($v0,$ra,$sp,$zero)=("\$0","\$26","\$30","\$31");
+
+print <<___;
+.globl	OPENSSL_instrument_bus
+.ent	OPENSSL_instrument_bus
+OPENSSL_instrument_bus:
+	.frame	$sp,0,$ra
+	.prologue 0
+	mov	$cnt,$v0
+
+	rtc	$lasttick
+	mov	0,$diff
+
+#	ecb	($out)
+	lldw	$tick,0($out)
+	ldi     $tmp,1
+	wr_f    $tmp
+	addl	$diff,$tick,$tick
+	mov	$tick,$diff
+	lstw	$tick,0($out)
+	rd_f    $tmp
+	stl	$diff,0($out)
+
+.Loop:	rtc	$tick
+	subl	$tick,$lasttick,$diff
+	mov	$tick,$lasttick
+
+#	ecb	($out)
+	lldw	$tick,0($out)
+	ldi     $tmp,1
+	wr_f    $tmp
+	addl	$diff,$tick,$tick
+	mov	$tick,$diff
+	lstw	$tick,0($out)
+	rd_f    $tmp
+	stl	$diff,0($out)
+
+	subl	$cnt,1,$cnt
+	ldi	$out,4($out)
+	bne	$cnt,.Loop
+
+	ret	($ra)
+.end	OPENSSL_instrument_bus
+
+.globl	OPENSSL_instrument_bus2
+.ent	OPENSSL_instrument_bus2
+OPENSSL_instrument_bus2:
+	.frame	$sp,0,$ra
+	.prologue 0
+	mov	$cnt,$v0
+
+	rtc	$lasttick
+	mov	0,$diff
+
+#	ecb	($out)
+	lldw	$tick,0($out)
+	ldi     $tmp,1
+	wr_f    $tmp
+	addl	$diff,$tick,$tick
+	mov	$tick,$diff
+	lstw	$tick,0($out)
+	rd_f    $tmp
+	stl	$diff,0($out)
+
+	rtc	$tick
+	subl	$tick,$lasttick,$diff
+	mov	$tick,$lasttick
+	mov	$diff,$lastdiff
+.Loop2:
+#	ecb	($out)
+	lldw	$tick,0($out)
+	ldi     $tmp,1
+	wr_f    $tmp
+	addl	$diff,$tick,$tick
+	mov	$tick,$diff
+	lldw	$tick,0($out)
+	rd_f    $tmp
+	stl	$diff,0($out)
+
+	subl	$max,1,$max
+	beq	$max,.Ldone2
+
+	rtc	$tick
+	subl	$tick,$lasttick,$diff
+	mov	$tick,$lasttick
+	subl	$lastdiff,$diff,$tick
+	mov	$diff,$lastdiff
+	selne	$tick,1,$tick
+	subl	$cnt,$tick,$cnt
+	s4addl	$tick,$out,$out
+	bne	$cnt,.Loop2
+
+.Ldone2:
+	subl	$v0,$cnt,$v0
+	ret	($ra)
+.end	OPENSSL_instrument_bus2
+___
+}
+
+close STDOUT;
diff --git a/providers/implementations/rands/seeding/rand_unix.c b/providers/implementations/rands/seeding/rand_unix.c
index 9a936d8..444208c 100644
--- a/providers/implementations/rands/seeding/rand_unix.c
+++ b/providers/implementations/rands/seeding/rand_unix.c
@@ -319,6 +319,8 @@ static ssize_t sysctl_random(char *buf, size_t buflen)
 #     define __NR_getrandom    352
 #    elif defined(__cris__)
 #     define __NR_getrandom    356
+#    elif defined(__sw_64__)
+#     define __NR_getrandom    511
 #    else /* generic (f.e. aarch64, loongarch, loongarch64) */
 #     define __NR_getrandom    278
 #    endif
